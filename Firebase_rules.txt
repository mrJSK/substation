rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if the authenticated user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin' ||
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'superAdmin';
    }

    // Rule for the 'users' collection
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow create: if request.auth != null; // Allow new users to create their own profile on signup
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
    }

    // Rule for the 'appscreenstates' collection
    match /appscreenstates/{documentId} {
      allow read: if request.auth != null; // Allow any authenticated user to read
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Allow admins to write
    }

    // Rule for the 'companys' collection
    match /companys/{companyId} {
      allow read: if request.auth != null; // Allow any authenticated user to read
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Allow admins to write
    }

    // Rule for the 'zones' collection
    match /zones/{zoneId} {
      allow read: if request.auth != null; // Allow any authenticated user to read
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Allow admins to write
    }

    // Rule for the 'circles' collection
    match /circles/{circleId} {
      allow read: if request.auth != null; // Allow any authenticated user to read
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Allow admins to write
    }

    // Rule for the 'divisions' collection
    match /divisions/{divisionId} {
      allow read: if request.auth != null; // Allow any authenticated user to read
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Allow admins to write
    }

    // Rule for the 'subdivisions' collection
    match /subdivisions/{subdivisionId} {
      allow read: if request.auth != null; // Allow any authenticated user to read
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Allow admins to write
    }

    // Rule for the 'substations' collection
    match /substations/{substationId} {
      allow read: if request.auth != null; // Allow any authenticated user to read
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Allow admins to write
    }

    // Rule for the 'bays' collection
    match /bays/{bayId} {
      allow read: if request.auth != null; // Allow any authenticated user to read
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Allow admins to write
    }

    // Rule for the 'states' collection
    match /states/{stateId} {
      allow read: if request.auth != null; // Allow any authenticated user to read
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Allow admins to write
    }

    // Rule for the 'cities' collection
    match /cities/{cityId} {
      allow read: if request.auth != null; // Allow any authenticated user to read
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Allow admins to write
    }
  }
}